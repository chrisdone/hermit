--------------------------------------------
-- Verify list-monoid-left
--
-- forall x.  mempt `mappen` x = x
--
--------------------------------------------

-- To test this script:
--   prog-end
--   load-and-run "verify-list-monoid-left.hec"
--   show-lemmas

rule-to-lemma "monoid-left"

load-and-run "verify-nil-append.hec"

-- first do the proof interactively
--
-- rule-lhs-intro "monoid-left"
-- consider lam ; lams-body
-- any-bu (inline [ 'mempt, 'mappen ]) ; smash
-- any-bu (forward (lemma "nil-append"))

-- then encode the proof as a rewrite or script
define-script "list-monoid-left-proof" "any-bu (inline [ 'mempt, 'mappen ]) ; smash ;
                                        any-bu (forward (lemma nil-append))"

verify-lemma "monoid-left" (script-to-proof list-monoid-left-proof)

