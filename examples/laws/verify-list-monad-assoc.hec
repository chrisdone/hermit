--------------------------------------------
-- Verify monad-assoc (for List)
--
--
-- forall m f g.  (m `bind` f) `bind` g  =  m `bind` \x -> (f x `bind` g)

-- OR, using Kleisli composition
-- (>=>) :: Monad m => (a -> m b) -> (b -> m c) -> a -> m c
-- (m >=> n) x = m x >>= n
--
-- Associativity: (f >=> g) >=> h â‰¡ f >=> (g >=> h)
--
--
--
-- TO BE COMPLETED.
--
--
-- See:  http://mvanier.livejournal.com/4647.html
-- "Yet Another Monad Tutorial (part 4: The Maybe and List Monads)"
-- by Mike Vanier
-- for a clear and detailed proof of this monad law for List.
--
-- He factors this problem (in a way convenient for us) with:
-- "In addition, I'll be using several identities involving map and concat applied to lists.
--  You should just take these on faith for now, though I'll show how to derive them below._
--  -- equation 1:
--  map (f . g)  =  map f . map g
--  -- equation 2:
--  map f . concat =  concat . map (map f)
--  \f x -> map f (concat x) == \f x -> concat (map (map f) x)
--  -- equation 3:
--  concat . concat  =  concat . map concato
-- \x -> concat (concat x) == \x -> concat (map concat x)

--------------------------------------------

-- To test this script:
--   prog-end
--   load-and-run "verify-list-monad-assoc.hec"
--   show-lemmas

rule-to-lemma "monad-assoc"
load-and-run verify-map-compose.hec
load-and-run verify-concat-nonempty.hec
load-and-run verify-concat-concat.hec
load-and-run verify-map-concat.hec

load "list-monad-assoc-left-proof" "list-monad-assoc-lhs.her"
load "list-monad-assoc-right-proof" "list-monad-assoc-rhs.her"

verify-lemma "monad-assoc" (script-both-sides-to-proof list-monad-assoc-left-proof list-monad-assoc-right-proof)
