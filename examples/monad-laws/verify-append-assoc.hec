--------------------------------------------
-- Verify append-assoc
--
-- forall x y z.  x ++ (y ++ z) = (x ++ y) ++ z
--
--------------------------------------------

-- To test this script:
--   prog-end
--   load-and-run "verify-append-assoc.hec"
--   show-lemmas

rule-to-lemma "append-assoc"

rule-to-lemma "cons-append"
load-and-run "verify-nil-append.hec"

-- first do the proof interactively
--

-- Begin with the lhs
-- {rule-lhs-intro "append-assoc"
-- consider lam ; lams-body

-- case-split-inline 'x
-- {case-alt 0
--   any-bu (forward (lemma "nil-append"))
-- yields:  [] → (++) y z
-- }
-- {case-alt 1
--    one-bu (forward (lemma-unsafe cons-append))
--    one-bu (forward (lemma-unsafe append-assoc))
-- yields:  (:) a b → (:) a ((++) ((++) b y) z)
-- }
--}

-- Now, for the rhs
-- {rule-rhs-intro "append-assoc"
-- consider lam ; lams-body

-- case-split-inline 'x
-- {case-alt 0
--   any-bu (forward (lemma "nil-append"))
-- yields:  [] → (++) y z
-- }
-- {case-alt 1
--    one-bu (forward (lemma-unsafe cons-append))
--    one-bu (forward (lemma-unsafe cons-append))
-- yields:  (:) a b → (:) a ((++) ((++) b y) z)
-- }
-- }
--
---- then encode the proof as a rewrite or script
define-script "append-assoc-nil"  "any-bu (forward (lemma nil-append))"
define-script "append-assoc-cons-left"  "one-bu (forward (lemma-unsafe cons-append)) ; one-bu (forward (lemma-unsafe append-assoc))"
define-script "append-assoc-cons-right" "one-bu (forward (lemma-unsafe cons-append)) ; one-bu (forward (lemma-unsafe cons-append))"

verify-lemma "append-assoc" (inductive-proof-both-sides 'x [ '"[]" , ': ] [ append-assoc-nil , append-assoc-cons-left ] [ append-assoc-nil , append-assoc-cons-right ] )

